openapi: 3.0.0
info:
  title: Sriflix API
  description: REST API for Sriflix Web App
  version: 1.0.0

servers:
  - url: http://localhost:8000/api
    description: Local
  - url: https://sriflix.kurniawanc.com/api
    description: Production

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /movies:
    get:
      summary: Returns all movies.
      responses:
        "200":
          description: Get all movies response
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    example:
                      [
                        {
                          id: "123abc",
                          title: "movie name",
                          description: "some movie description",
                          picture_url: "link to picture url",
                          video_url: "link to movie video url",
                        },
                        {
                          id: "321bca",
                          title: "movie name",
                          description: "some movie description",
                          picture_url: "link to picture url",
                          video_url: "link to movie video url",
                        },
                        {
                          id: "132acb",
                          title: "movie name",
                          description: "some movie description",
                          picture_url: "link to picture url",
                          video_url: "link to movie video url",
                        },
                      ]
  /movies/{movieId}:
    get:
      summary: Returns single movie.
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      responses:
        "200":
          description: Get single movie response
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    type: object
                    example:
                      {
                        id: "123abc",
                        title: "movie name",
                        description: "some movie description",
                        picture_url: "link to picture url",
                        video_url: "link to movie video url",
                      }
        "404":
          description: Movie not found response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie not found"
  /auth/register:
    post:
      summary: Register and create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: username123
                  required: true
                  minLength: 6
                password:
                  type: string
                  example: 123456
                  required: true
                  minLength: 6
      responses:
        200:
          description: Register success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
        400:
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username is required
        409:
          description: Conflict Data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username already exists
  /auth/login:
    post:
      summary: Login with existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: username123
                  required: true
                password:
                  type: string
                  example: 123456
                  required: true
      responses:
        200:
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  access_token:
                    type: string
                    example: abcdefghijklmn
        401:
          description: Wrong username or password info
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Wrong credentials
  /auth/me:
    get:
      summary: Get authenticated user info
      security:
        - bearerAuth: []
      responses:
        200:
          description: Get user info success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  user:
                    type: object
                    example: { user: { username: user123 } }
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
  /reviews/{movieId}:
    get:
      summary: Create new review for selected movie
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: This is test comment
                  required: true
                rating:
                  type: number
                  example: 3
                  required: true
                  minimum: 1
                  maximum: 5
      responses:
        200:
          description: Create new review success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  movieReview:
                    type: object
                    example:
                      {
                        movieReview:
                          {
                            id: 9a5d8963-1f53-49dc-9846-2ca94bade073,
                            comment: This is test comment,
                            rating: 3,
                            movieId: 9a5d7000-f08a-428e-94c4-ff6c3e8c06a3,
                            userId: 9a5d860b-21a9-46ff-b34b-1d294f7f700a,
                            created_at: 2023-10-14T06:34:36.000000Z,
                            updated_at: 2023-10-14T06:34:36.000000Z,
                          },
                      }
        400:
          description: Invalid movie id (UUID)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid movie id
        404:
          description: Selected movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie not found
        409:
          description: Movie review already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie review already exists
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
