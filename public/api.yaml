openapi: 3.0.0
info:
  title: Sriflix API
  description: REST API for Sriflix Web App
  version: 1.0.0

servers:
  - url: http://localhost:8000/api
    description: Local
  - url: https://sriflix.kurniawanc.com/api
    description: Production

tags:
  - name: Movie
    description: API about Movie
  - name: Auth
    description: API about Authentication
  - name: Movie Review
    description: API about Movie Review
  - name: Genre
    description: API about Movie Genre
  - name: Featured Movies
    description: API about featured movies

paths:
  /movies:
    get:
      tags:
        - Movie
      summary: Returns all movies.
      parameters:
        - in: query
          name: genre
          schema:
            type: string
            default: null
            description: Specific genre filter for movies (separated by comma)
        - in: query
          name: search
          schema:
            type: string
            default: null
            description: Specific keyword filter for movies search
        - in: query
          name: page
          schema:
            type: integer
            default: null
            description: Specific page filter for movies pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: null
            description: Specific limit count filter for movies pagination
      responses:
        200:
          description: Get all movies response
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Movie"
    post:
      tags:
        - Movie
      summary: Create new movie (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Test Movie Title
                  required: true
                genre:
                  type: array
                  example: ["action", "adventure"]

                description:
                  type: string
                  example: Test Movie Description
                  required: true
                picture_url:
                  type: string
                  example: Test Movie Picture URL
                  required: true
                video_url:
                  type: string
                  example: Test Movie Video URL
                  required: true
      responses:
        200:
          description: Create movie success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  movie:
                    $ref: "#/components/schemas/Movie"
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          description: Validation Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Title field is required
        409:
          description: Movie title already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie title already exists
  /movies/{movieId}:
    get:
      tags:
        - Movie
      summary: Returns single movie.
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      responses:
        200:
          description: Get single movie response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  movie:
                    $ref: "#/components/schemas/Movie"
        400:
          $ref: "#/components/responses/InvalidMovieId"
        404:
          $ref: "#/components/responses/MovieNotFound"
    delete:
      tags:
        - Movie
      summary: Delete single movie (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      responses:
        200:
          $ref: "#/components/responses/SuccessMessage"
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/InvalidMovieId"
        404:
          $ref: "#/components/responses/MovieNotFound"
    put:
      tags:
        - Movie
      summary: Update single movie info (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Test Movie Title
                genre:
                  type: array
                  example: ["kids", "comedy"]
                description:
                  type: string
                  example: Test Movie Description
                picture_url:
                  type: string
                  example: Test Movie Picture URL
                video_url:
                  type: string
                  example: Test Movie Video URL
      responses:
        200:
          $ref: "#/components/responses/SuccessMessage"
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/InvalidMovieId"
        404:
          $ref: "#/components/responses/MovieNotFound"

  /featured:
    get:
      tags:
        - Featured Movies
      summary: Returns all featured movies.
      responses:
        200:
          description: Get all featured movies success
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Movie"
  /featured/{movieId}:
    post:
      tags:
        - Featured Movies
      summary: Insert new featured movies (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      responses:
        200:
          $ref: "#/components/responses/SuccessMessage"
        400:
          $ref: "#/components/responses/InvalidMovieId"
        404:
          $ref: "#/components/responses/MovieNotFound"
        409:
          description: Movie already existed in featured movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Featured movies already exists
    delete:
      tags:
        - Featured Movies
      summary: Delete existing featured movies (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      responses:
        200:
          $ref: "#/components/responses/SuccessMessage"
        400:
          $ref: "#/components/responses/InvalidMovieId"
        404:
          $ref: "#/components/responses/MovieNotFound"

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register and create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: username123
                  required: true
                  minLength: 6
                password:
                  type: string
                  example: 123456
                  required: true
                  minLength: 6
      responses:
        200:
          $ref: "#/components/responses/SuccessMessage"
        400:
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username is required
        409:
          description: Conflict Data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username already exists
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login with existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: username123
                  required: true
                password:
                  type: string
                  example: 123456
                  required: true
      responses:
        200:
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  access_token:
                    type: string
                    example: abcdefghijklmn
                  role:
                    type: string
                    enum:
                      - user
                      - admin
                    example: user
        401:
          description: Wrong username or password info
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Wrong credentials
  /auth/me:
    get:
      tags:
        - Auth
      summary: Get authenticated user info
      security:
        - bearerAuth: []
      responses:
        200:
          description: Get user info success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  user:
                    $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout and revoke current user access
      security:
        - bearerAuth: []
      responses:
        200:
          $ref: "#/components/responses/SuccessMessage"
        401:
          $ref: "#/components/responses/Unauthorized"

  /reviews/{movieId}:
    get:
      tags:
        - Movie Review
      summary: Get reviews for selected movie
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      responses:
        200:
          description: Get reviews success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  reviews:
                    type: array
                    items:
                      $ref: "#/components/schemas/MovieReview"
        400:
          $ref: "#/components/responses/InvalidMovieId"
        404:
          $ref: "#/components/responses/MovieNotFound"
    post:
      tags:
        - Movie Review
      summary: Create new review for selected movie (user only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: This is test comment
                  required: false
                rating:
                  type: number
                  example: 3
                  required: true
                  minimum: 1
                  maximum: 5
      responses:
        200:
          description: Create new review success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  review:
                    $ref: "#/components/schemas/MovieReview"
        400:
          $ref: "#/components/responses/InvalidMovieId"
        404:
          $ref: "#/components/responses/MovieNotFound"
        409:
          description: Movie review already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie review already exists
        401:
          $ref: "#/components/responses/Unauthorized"

  /genres:
    get:
      tags:
        - Genre
      summary: Get all available movie genres
      responses:
        200:
          description: Get data success
          content:
            application/json:
              schema:
                type: object
                properties:
                  genres:
                    type: array
                    items:
                      $ref: "#/components/schemas/Genres"

components:
  schemas:
    Movie:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c387e062-69b3-4d7b-b758-59264c24de60
        title:
          type: string
          example: Movie Title
        description:
          type: string
          example: Some movie description text
        picture_url:
          type: string
          example: https://source.com/picture.png
        video_url:
          type: string
          example: https://source.com/video.mp4
        avg_rating:
          type: number
          example: 3.5
        rating_count:
          type: number
          example: 23
        genres:
          type: array
          items:
            $ref: "#/components/schemas/Genres"

    User:
      type: object
      properties:
        username:
          type: string
          example: user123
        role:
          type: string
          enum:
            - user
            - admin
          example: user
    MovieReview:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c387e062-69b3-4d7b-b758-59264c24de60
        comment:
          type: string
          example: Some review comment
        rating:
          type: integer
          example: 3
        movie_id:
          type: string
          format: uuid
          example: c387e062-69b3-4d7b-b758-59264c24de60
        user:
          type: object
          properties:
            id:
              type: string
              example: c387e062-69b3-4d7b-b758-59264c24de77
            username:
              type: string
              example: user123
        created_at:
          type: string
          example: 2023-10-14T06:34:36.000000Z
        updated_at:
          type: string
          example: 2023-10-14T06:34:36.000000Z
    Genres:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Action
  responses:
    Unauthorized:
      description: Unauthorized Access
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
    MovieNotFound:
      description: Movie not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Movie not found
    InvalidMovieId:
      description: Movie not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid movie id
    SuccessMessage:
      description: Success message response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Success

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
