openapi: 3.0.0
info:
  title: Sriflix API
  description: REST API for Sriflix Web App
  version: 1.0.0

servers:
  - url: http://localhost:8000/api
    description: Local
  - url: https://sriflix.kurniawanc.com/api
    description: Production

tags:
  - name: Movie
    description: API about Movie
  - name: Auth
    description: API about Authentication
  - name: Movie Review
    description: API about Movie Review

paths:
  /movies:
    get:
      tags:
        - Movie
      summary: Returns all movies.
      responses:
        "200":
          description: Get all movies response
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Movie"
  /movies/{movieId}:
    get:
      tags:
        - Movie
      summary: Returns single movie.
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      responses:
        "200":
          description: Get single movie response
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    $ref: "#/components/schemas/Movie"
        "404":
          description: Movie not found response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie not found"

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register and create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: username123
                  required: true
                  minLength: 6
                password:
                  type: string
                  example: 123456
                  required: true
                  minLength: 6
      responses:
        200:
          description: Register success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
        400:
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username is required
        409:
          description: Conflict Data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username already exists
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login with existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: username123
                  required: true
                password:
                  type: string
                  example: 123456
                  required: true
      responses:
        200:
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  access_token:
                    type: string
                    example: abcdefghijklmn
        401:
          description: Wrong username or password info
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Wrong credentials
  /auth/me:
    get:
      tags:
        - Auth
      summary: Get authenticated user info
      security:
        - bearerAuth: []
      responses:
        200:
          description: Get user info success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  user:
                    $ref: "#/components/schemas/User"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

  /reviews/{movieId}:
    get:
      tags:
        - Movie Review
      summary: Get reviews for selected movie
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      responses:
        200:
          description: Create new review success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  reviews:
                    type: array
                    items:
                      $ref: "#/components/schemas/MovieReview"
        400:
          description: Invalid movie id (UUID)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid movie id
        404:
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie not found
    post:
      tags:
        - Movie Review
      summary: Create new review for selected movie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id in UUID format
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: This is test comment
                  required: true
                rating:
                  type: number
                  example: 3
                  required: true
                  minimum: 1
                  maximum: 5
      responses:
        200:
          description: Create new review success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  review:
                    $ref: "#/components/schemas/MovieReview"
        400:
          description: Invalid movie id (UUID)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid movie id
        404:
          description: Selected movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie not found
        409:
          description: Movie review already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie review already exists
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized

components:
  schemas:
    Movie:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c387e062-69b3-4d7b-b758-59264c24de60
        title:
          type: string
          example: Movie Title
        description:
          type: string
          example: Some movie description text
        picture_url:
          type: string
          example: https://source.com/picture.png
        video_url:
          type: string
          example: https://source.com/video.mp4
        avg_rating:
          type: number
          example: 3.5
        rating_count:
          type: number
          example: 23
    User:
      type: object
      properties:
        username:
          type: string
          example: user123
    MovieReview:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c387e062-69b3-4d7b-b758-59264c24de60
        comment:
          type: string
          example: Some review comment
        rating:
          type: integer
          example: 3
        movie_id:
          type: string
          format: uuid
          example: c387e062-69b3-4d7b-b758-59264c24de60
        user_id:
          type: string
          format: uuid
          example: c387e062-69b3-4d7b-b758-59264c24de60
        created_at:
          type: string
          example: 2023-10-14T06:34:36.000000Z
        updated_at:
          type: string
          example: 2023-10-14T06:34:36.000000Z

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
